package pages;

import static org.junit.Assert.assertTrue;

import java.io.IOException;
import java.util.List;
import java.util.Random;

import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import base.TestBase;
import utilitiesRappi.RappiUtility;

/**
 * @author Nohora Meneses
 *
 */
public class RappiWebRestaurants extends TestBase {

	// Object Repository for RappiWebRestaurants
	// By mainTitleRest = By.id("by-stores-title"); //Se actualizo elemento 21Feb19
	By mainTitleRest = By.xpath("//*[@class='by-stores-breadcrumbs ng-star-inserted']");
	By mainRestBox = By.xpath("//*[@class='store-list-boxes']");
	By idRestInList = By.xpath("//*[starts-with(@id,'store-')]");
	By nameRestInList = By.xpath("//*[@class='store-info ng-star-inserted']//span[@class='store-name']");
	By subMenuCategorias = By.xpath("//*[@class='title-order-categories ng-star-inserted']");

	By mainRestList = By.xpath("//*[@class='store-item-box']");
	By infoGralRestSelect = By.xpath("//*[@class='store-detail-section']");
	By restSelectName = By.id("store-name");
	By restSelectLogo = By.xpath("//*[@class='store-logo']");
	By listRestShowToSelect = By.xpath("//*[@class='products-list show-products']");
	

	By mainCatShowRestList = By.xpath("//*[@class='products-list show-products']/child::div/child::div");
	By infoGralCatSelect = By.xpath("//div[starts-with(@id,'category-products-')]");
	By catSelectName = By.xpath("//h2[starts-with(@id,'corridor-name-')]");
	By listProdInCatWithImage = By.xpath("//div[starts-with(@id,'product-image-')]");
	By listProdInCatWithoutImage = By.xpath("//div[starts-with(@id,'product-no-image-')]");

	By mainProdShowInCat = By.xpath("//div[starts-with(@id,'category-products-')]/child::div/child::div");
	By infoGralProdSelect = By.xpath("//a[starts-with(@id,'product-')]");
	By prodSelectName = By.id("store-product-title");
	By idProdInList = By.xpath("//app-store-product//a[starts-with(@id,'product-')]");
	By prodSelecPrice = By.xpath("//*[@class='store-product-price']");
	By indicadorProdAddToBasket = By.cssSelector("small[class^='ng-star-inserted']");
	//By prodSelecPrice = By.xpath("//*[starts-with(@id,'product-')]//*[@class='store-product-price']");
	//*[@id="product-2090214904"]/span/span[1]/span[3]
	///*[class='store-product-price']

	By searchRestList = By.xpath("//*[@class='by-stores-search ng-star-inserted']/child::ul/child::li");
	By subSearchRestList = By.cssSelector("li");
	By infoProduct = By.xpath("//*[@class='cont-view-product']");
	By msjeConfirmAddress = By.xpath("//*[@id='addresses-modal']/div/div/div[1]/div[2]/div[2]/div");
	By modalAlertas = By.cssSelector("div[class^='modal-box']");
	By btnCloseModalAlertas = By.cssSelector("button[class^='close-modal']");
	By btnYesModalAlertaEdad = By.cssSelector("button[class^='btn-confirmation']");
	By btnMsjeYes = By.xpath("//button[@class='red-shadow']");
	By nameAddressToConfirm = By.xpath("//*[@class='address-confirmation-name']");
	By alertaLoginRest = By.xpath("//app-alert-login//*[@class='cont-alert-login']");
	By btnEntrarLogin = By.xpath("//app-alert-login//button");
	//*[@id="body"]/app-container/app-header/app-alert-login/div[2]/button
	
	RappiWebHomePage objHomePage;
	RappiWebLogin objLogin;
	
	/**
	 * This POM method will validate title On Restaurant
	 * 
	 * @return TRUE only if Main Title is Displayed
	 */
	public Boolean verifyTitleRest() {
		return RappiUtility.verifyAnElement(true, driver.findElement(mainTitleRest));
	}

	/**
	 * This POM method will validate Main Restaurants
	 * 
	 * @return TRUE only if Main Restaurants are Displayed
	 */
	public Boolean verifyMainRestBox() {
		return RappiUtility.verifyAnElement(true, driver.findElement(mainRestBox));
	}

	/**
	 * This POM method will validate actual Name from Categories
	 * 
	 * @return TRUE only if actual Title On Categories is Displayed
	 */
	public Boolean verifyCategoriesOnRest() {
		return RappiUtility.verifyAnElement(true, driver.findElement(subMenuCategorias));
	}
	
	/**
	 * This POM method will validate Main Page Objects On Restaurants
	 */
	public void verifyMainPageObjInRest() {
		
		try {
			if(verifyCategoriesOnRest() && verifyTitleRest() && verifyMainRestBox()) {
				RappiUtility.takeScreen(sTestCaseName + "/Img_Restaurants_" + sCountry);
			}else {
				throw new IOException("ERROR HOME RESTAURANT: Main Page Objects On Restaurants aren't Displayed!");
			}
		} catch (Exception e) {
			RappiUtility.takeScreen("Img_Error_" + sTestCaseName + "/HomeRestaurantsFailed");
			System.out.println(e.getMessage());
		}
	}

	/**
	 * This POM method will choose A Product From Category Selected
	 * 
	 * @return TRUE only if click on Product is Correct
	 */
	public Boolean chooseAProdInCategory(WebElement idCatSelect, int numCatSelect) {
		int randomNumProdInCat = 0;
		wait = new WebDriverWait(driver, 1);

		try {
			System.out.println("Try_chooseAProdInCategory");
			List<WebElement> elemProdShowInCat = idCatSelect.findElements(By.cssSelector("div[id^='product-image-']"));
			List<WebElement> elemProdSinImageShowInCat = idCatSelect
					.findElements(By.cssSelector("div[id^='product-no-image-']"));

			int numProdInCats = elemProdShowInCat.size();
			int numProdSinImageInCats = elemProdSinImageShowInCat.size();

			int totalProdShow = 0;

			if (numProdInCats > 0 || numProdSinImageInCats > 0) {
				totalProdShow = numProdInCats + numProdSinImageInCats;
				randomNumProdInCat = objGenerator.nextInt(totalProdShow);
			} else {
				RappiUtility.takeScreen("Img_Error_" + sTestCaseName + "/RestCategory_Empty");
				throw new IOException("ERROR #PROD=0: There aren't products in category selected!");
			}
//			System.out.println("Total Prod en Categ:" + totalProdShow + "\nProd Selec Random:" + randomNumProdInCat);

			if (numProdInCats > 0 && randomNumProdInCat < numProdInCats) {
				RappiUtility.scrollToElement(elemProdShowInCat.get(randomNumProdInCat));
				RappiUtility.scrollUp();

				if (elemProdShowInCat.get(randomNumProdInCat).getAttribute("id").contains("product-image-")) {
					String nameProdTemp = elemProdShowInCat.get(randomNumProdInCat).findElement(prodSelectName)
							.getAttribute("title").trim();
					sNameProdSelected = nameProdTemp.replaceAll("[^\\dA-Za-z]", "");
					System.out.println("NameProdImg[" + randomNumProdInCat + "]:" + sNameProdSelected);

					if (elemProdShowInCat.get(randomNumProdInCat).getText().trim().toLowerCase()
							.contains("no disponible")
							|| elemProdShowInCat.get(randomNumProdInCat).getText().trim().toLowerCase()
									.contains("não disponível")) {
						RappiUtility.highLightElement(elemProdShowInCat.get(randomNumProdInCat), false);
						RappiUtility.takeScreen("ImgError_Rest/Prod_" + sNameProdSelected + "_Not_Available");
						throw new IOException("ERROR NO DISPONIBLE: Product " + sNameProdSelected + " not Available!");
					} else {

						RappiUtility
								.scrollToElement(elemProdShowInCat.get(randomNumProdInCat).findElement(prodSelectName));
						wait.until(ExpectedConditions.visibilityOfAllElements(
								elemProdShowInCat.get(randomNumProdInCat).findElement(prodSelectName)));
						RappiUtility.scrollUp();

						if (RappiUtility.verifyAnElement(false, elemProdShowInCat.get(randomNumProdInCat))) {
							sIdProdSelected = elemProdShowInCat.get(randomNumProdInCat)
									.findElement(By.cssSelector("a[id^='product-']")).getAttribute("id");
							sPriceProdSelected = elemProdShowInCat.get(randomNumProdInCat)
									.findElement(By.cssSelector("span[class^='store-product-price']")).getText().trim();
							// System.out.println("ID:" + sIdProdSelected + "\nPrecio:" +
							// sPriceProdSelected);
							return RappiUtility.clickOnElement(elemProdShowInCat.get(randomNumProdInCat));
						} else {
							throw new IOException(
									"ERROR CLICK PROD: Click Product " + sNameProdSelected + " isn't Enabled!");
						}
					}
				} else {
					throw new IOException("ERROR PRODUCT ID: Product ID With Image not Available!");
				}
			} else if (numProdSinImageInCats > 0 && randomNumProdInCat >= numProdInCats) {

				int randTempoProdSinImag = objGenerator.nextInt(numProdSinImageInCats);

				RappiUtility.scrollToElement(elemProdSinImageShowInCat.get(randTempoProdSinImag));
				RappiUtility.scrollUp();

				if (elemProdSinImageShowInCat.get(randTempoProdSinImag).getAttribute("id")
						.contains("product-no-image-")) {
					String nameProdTempo2 = elemProdSinImageShowInCat.get(randTempoProdSinImag)
							.findElement(prodSelectName).getAttribute("title").trim();
					sNameProdSelected = nameProdTempo2.replaceAll("[^\\dA-Za-z]", "");
					System.out.println("NameProdSinImg[" + randTempoProdSinImag + "]:" + sNameProdSelected);

					if (elemProdSinImageShowInCat.get(randTempoProdSinImag).getText().trim().toLowerCase()
							.contains("no disponible")
							|| elemProdSinImageShowInCat.get(randTempoProdSinImag).getText().trim().toLowerCase()
									.contains("não disponível")) {
						RappiUtility.highLightElement(elemProdSinImageShowInCat.get(randTempoProdSinImag), false);
						RappiUtility.takeScreen(
								"ImgError_" + sTestCaseName + "/RestProduct_" + sNameProdSelected + "_Not_Available");
						throw new IOException("ERROR NO DISPONIBLE: Product " + sNameProdSelected + " not Available!");
					} else {

						RappiUtility.scrollToElement(
								elemProdSinImageShowInCat.get(randTempoProdSinImag).findElement(prodSelectName));
						wait.until(ExpectedConditions.visibilityOfAllElements(
								elemProdSinImageShowInCat.get(randTempoProdSinImag).findElement(prodSelectName)));
						RappiUtility.scrollUp();

						if (RappiUtility.verifyAnElement(false, elemProdSinImageShowInCat.get(randTempoProdSinImag))) {
							sIdProdSelected = elemProdSinImageShowInCat.get(randTempoProdSinImag)
									.findElement(By.cssSelector("a[id^='product-']")).getAttribute("id");
							sPriceProdSelected = elemProdSinImageShowInCat.get(randTempoProdSinImag)
									.findElement(By.cssSelector("span[class^='store-product-price']")).getText().trim();
							// System.out.println("IDNoImg:" + sIdProdSelected + "\nPrecioSinImg:" +
							// sPriceProdSelected);
							return RappiUtility.clickOnElement(elemProdSinImageShowInCat.get(randTempoProdSinImag));
						} else {
							throw new IOException(
									"ERROR CLICK PROD: Click Product " + sNameProdSelected + " isn't Enabled!");
						}
					}
				} else {
					throw new IOException("ERROR PRODUCT ID: Product ID Without Image not Available!");
				}
			} else {
				throw new IOException("ERROR #PRODUCT: Product Number isn't Exists!");
			}

		} catch (Exception e) {
			System.out.println("Catch_chooseAProdInCategory");
			System.out.println(e.getMessage());
			return false;
		}

	}

	/**
	 * This POM method will choose A Category From Selected Restaurant
	 * 
	 * @return TRUE only if click on Product is Correct
	 */
	public Boolean chooseACategoryFromRest() {
		int randomNumCatRest = 0;
		objGenerator = new Random();
		String strNameCatSel = "";
		wait = new WebDriverWait(driver, 1);

		try {
			System.out.println("Try_chooseACategoryFromRest");
			wait.until(ExpectedConditions.visibilityOfElementLocated(mainCatShowRestList));
			List<WebElement> elemCatRestShow = driver.findElements(mainCatShowRestList);

			int numCatRests = elemCatRestShow.size();
			randomNumCatRest = objGenerator.nextInt(numCatRests);
			// System.out.println("Total Cat en Rest:" + numCatRests + "\nCat Selec Random:" + randomNumCatRest);

			strNameCatSel = driver.findElements(catSelectName).get(randomNumCatRest).getText().trim();
//		System.out.println("CategSelect[" + randomNumCatRest + "]:" +elemCatRestShow.get(randomNumCatRest).getText()); //Cat+ProdEnCat
			System.out.println("NameCat[" + randomNumCatRest + "]:" + strNameCatSel); // Solo Nombre de Cat

			WebElement idCatSelect = elemCatRestShow.get(randomNumCatRest);
//		System.out.println("CatSele:" +idCatSelect.getText()); //Cat+ProdEnCat

			String idCat = idCatSelect.getAttribute("id");
			String idCatCorridor = driver.findElements(catSelectName).get(randomNumCatRest).getAttribute("id");
//		System.out.println("IDCat:"+idCat); //ID-CatGeneral
//		System.out.println("IDCatCorridor:"+idCatCorridor); //ID-CatCorridor
//		System.out.println("CAT_GRAL:"+driver.findElements(infoGralCatSelect).get(randomNumCatRest).getText()); // Muestra Cat+Products

			if (idCat.isEmpty() || idCatCorridor.isEmpty()) {
				throw new IOException("ERROR CATEGORY ID: Category ID " + strNameCatSel + " is Empty!");
			} else {

				RappiUtility.scrollToElement(idCatSelect.findElements(catSelectName).get(randomNumCatRest));

				wait.until(ExpectedConditions
						.visibilityOfAllElements(idCatSelect.findElements(infoGralCatSelect).get(randomNumCatRest)));

				RappiUtility.scrollUp();

				if (RappiUtility.verifyAnElement(false,
						idCatSelect.findElements(infoGralCatSelect).get(randomNumCatRest))
						&& RappiUtility.verifyAnElement(false,
								idCatSelect.findElements(catSelectName).get(randomNumCatRest))) {

					wait.until(ExpectedConditions
							.visibilityOf(idCatSelect.findElements(catSelectName).get(randomNumCatRest)));

//					RappiUtility.highLightElement(driver,idCatSelect.findElements(infoGralCatSelect).get(randomNumCatRest));
					RappiUtility.highLightElement(idCatSelect.findElements(catSelectName).get(randomNumCatRest), true);
					RappiUtility.takeScreen(sTestCaseName + "/Img_Cat_Selected_" + strNameCatSel);

					return chooseAProdInCategory(idCatSelect, randomNumCatRest);

				} else {
					throw new IOException("ERROR CAT: Category " + strNameCatSel + " isn't Enabled!");
				}

			}
		} catch (Exception e) {
			System.out.println("Catch_chooseACategoryFromRest");
			RappiUtility.takeScreen("ImgError_" + sTestCaseName + "/Rest_Category_" + strNameCatSel + "_Empty");
			System.out.println(e.getMessage());
			return false;
		}

	}

	/**
	 * This POM method will choose A Restaurant from Restaurants list
	 * 
	 * @return TRUE only if click on Restaurant is Correct
	 */
	public Boolean chooseARestFromMainList() {
		int randomNumRest = 0;
		objGenerator = new Random();
		String strNameRestSel = "";
		wait = new WebDriverWait(driver, 1);

		try {
			System.out.println("Try_chooseARestFromMainList");
			wait.until(ExpectedConditions.visibilityOfElementLocated(mainRestList));
			List<WebElement> elemRestList = driver.findElements(mainRestList);

			int numRests = elemRestList.size();
			randomNumRest = objGenerator.nextInt(numRests);
			// System.out.println("Total Lista Rest:" + numRests + "\nRest Selec Random:" + randomNumRest);

			// strNameRestSel = driver.findElements(nameRestInList).get(randomNumRest).getAttribute("title").trim();
			strNameRestSel = elemRestList.get(randomNumRest).findElement(By.cssSelector("span[class^='store-name']")).getText().trim();
//		System.out.println("ID:" + driver.findElements(idRestInList).get(randomNumRest).getAttribute("id"));
			System.out.println("NameRest[" + randomNumRest + "]:" + strNameRestSel);

			RappiUtility.scrollToElement(elemRestList.get(randomNumRest));
			RappiUtility.scrollUp();
			wait.until(ExpectedConditions.visibilityOfAllElements(elemRestList.get(randomNumRest)));

			String strInfGralRest = elemRestList.get(randomNumRest).getText().trim().toLowerCase();
			// System.out.println("Name2:" +strInfGralRest);

			if (strInfGralRest.contains("cerrado") || strInfGralRest.contains("fechado")) {
				RappiUtility.highLightElement(elemRestList.get(randomNumRest), false);
				RappiUtility.takeScreen("ImgError_" + sTestCaseName + "/Rest_" + strNameRestSel + "_Closed");
				// throw new IOException("ERROR CLOSE REST: Restaurant " + strNameRestSel + " Cerrado - not Available!");
				flagModalAlerta = true;
			} else {
				if (RappiUtility.clickOnElement(elemRestList.get(randomNumRest))) {
					try {
						wait.until(ExpectedConditions.visibilityOfElementLocated(infoGralRestSelect));
						if (RappiUtility.verifyAnElement(false, driver.findElement(infoGralRestSelect))
								&& RappiUtility.verifyAnElement(false, driver.findElement(restSelectLogo))
								&& RappiUtility.verifyAnElement(false, driver.findElement(restSelectName))) {

							try {
								wait.until(ExpectedConditions.visibilityOfElementLocated(listRestShowToSelect));
								if (RappiUtility.verifyAnElement(false, driver.findElement(listRestShowToSelect))) {
									RappiUtility.takeScreen(sTestCaseName + "/Img_Rest_Selected_" + strNameRestSel);

									return chooseACategoryFromRest();
								} else {
									throw new IOException("ERROR LIST CAT: Categories in Restaurants aren't Displayed!");
								}
							} catch (Exception e2) {
								RappiUtility.takeScreen("ImgError_" + sTestCaseName + "/Rest_CategoriesList_Not_Displayed");
								System.out.println(e2.getMessage());
								return false;
							}
						} else {
							throw new IOException(
									"ERROR INFO REST: Info On Restaurant " + strNameRestSel + " isn't Displayed!");
						}
					} catch (Exception e1) {
						wait.until(ExpectedConditions.visibilityOfElementLocated(mainRestList));
						RappiUtility.takeScreen("ImgError_" + sTestCaseName + "/Rest_" + strNameRestSel + "_Invalid");
						flagModalAlerta = true;
					}
				} else {
					throw new IOException("ERROR CLICK REST: Click On Restaurant " + strNameRestSel + " Failed!");
				}
			}
		} catch (Exception e) {
			System.out.println("Catch_chooseARestFromMainList_" + sBrowserName);
			System.out.println(e.getMessage());
			return false;
		}
		return true;
	}

	/**
	 * This POM method will choose A Rest from search Restaurant list
	 */
	public Boolean chooseARestFromSearchList() {
		objGenerator = new Random();
		String strRestSelect, strnameProdTemp;
		wait = new WebDriverWait(driver, 1);
		WebElement elemRestSelected, elemProdSelected;
		objHomePage = new RappiWebHomePage();

		try {
			System.out.println("Try_chooseARestFromSearchList_" + sBrowserName);
			wait.until(ExpectedConditions.visibilityOfElementLocated(searchRestList));

			List<WebElement> elemSearchRestList = driver.findElements(searchRestList);
			int numSearchRest = elemSearchRestList.size();

			int randomNumSearchRest = objGenerator.nextInt(numSearchRest);
			elemRestSelected = elemSearchRestList.get(randomNumSearchRest);
			strRestSelect = elemRestSelected.findElement(By.cssSelector("p")).getText().trim();
			System.out.println("Name Rest:" + strRestSelect);
			// System.out.println("TAM1:" +numSearchRest +"\nRandom:" +randomNumSearchRest);
			// System.out.println("ID:"
			// +restSelected.findElement(By.cssSelector("a[id^='product-']")).getAttribute("id"));

			RappiUtility.scrollToElement(elemRestSelected);
			RappiUtility.scrollUp();
			RappiUtility.verifyAnElement(true, elemRestSelected);
			RappiUtility.takeScreen(sTestCaseName + "/Img_Rest_Selected_" + strRestSelect);

			List<WebElement> elemSubList = elemRestSelected.findElements(subSearchRestList);
			int numSubRest = elemSubList.size();

			int randonNumSubRest = objGenerator.nextInt(numSubRest);
			elemProdSelected = elemSubList.get(randonNumSubRest);
			strnameProdTemp = elemProdSelected.findElement(By.cssSelector("p")).getText();
			sNameProdSelected = strnameProdTemp.replaceAll("[^\\dA-Za-z]", "");
			System.out.println("Name Prod:" + sNameProdSelected);
			// System.out.println("TAM Sub1:" +numSubRest +"\nSub-Random:"
			// +randonNumSubRest);
			// System.out.println("SubID:"
			// +prodSelected.findElement(By.cssSelector("a[id^='product-']")).getAttribute("id"));

			assertTrue("ERROR CREDIT CARD: Credit Card isn't Displayed!",
					RappiUtility.verifyAnElement(true, elemProdSelected));

			if (RappiUtility.clickOnElement(elemProdSelected)) {
				try {
					driver.findElement(infoProduct);
				} catch (Exception e2) {
					try {
						driver.findElement(modalAlertas);
						if (driver.findElement(modalAlertas).isDisplayed()) {
							System.out.println("Entro Modal");
							if (driver.findElement(modalAlertas).getText().contains("edad")
									|| driver.findElement(modalAlertas).getText().contains("idade")) {
								System.out.println("Modal Edad");
								RappiUtility.takeScreen(sTestCaseName + "/Img_Modal_AlertaEdad");
								driver.findElement(btnYesModalAlertaEdad).click();
								Thread.sleep(500);
								//return true;
							} else if (driver.findElement(modalAlertas).getText().contains("dirección")
									|| driver.findElement(modalAlertas).getText().contains("endereço")) {
								System.out.println("Modal Direccion");
								RappiUtility.takeScreen(sTestCaseName + "/Img_Modal_AlertaDireccion");
								driver.findElement(btnCloseModalAlertas).click();
								Thread.sleep(500);
							}
							if(objHomePage.verifyHeaderInHomePageWithLogin()) {
								try {
									driver.findElement(indicadorProdAddToBasket);
									if (driver.findElement(indicadorProdAddToBasket).isDisplayed()){
										RappiUtility.highLightElement(driver.findElement(indicadorProdAddToBasket), true);
										// return true;
									}
								} catch (Exception e3) {
									flagModalAlerta = true;
								}
							}
							return true;
						}
					} catch (Exception e3) {
						driver.findElement(alertaLoginRest);
						if (RappiUtility.verifyAnElement(true, driver.findElement(alertaLoginRest))) {
							RappiUtility.takeScreen(sTestCaseName + "/Img_Login_Required");
							return loginForSelectProduct();
						}
					}
				}
			} else {
				throw new IOException("ERROR CLICK PROD: Click On 'Product' in Rest isn't Enabled!");
			}
		} catch (Exception e) {
			System.out.println("Catch_chooseARestFromSearchList_" + sBrowserName);
			System.out.println("ERROR-chooseARestFromSearchList:" + e.getMessage());
			return false;
		}
		return true;
	}
	
	/**
	 * This POM method will Login to user if it Select a Product from Rest
	 * but doesn't Logued before
	 * 
	 * @return TRUE only if Login is Correct
	 */
	public Boolean loginForSelectProduct() {
		objLogin = new RappiWebLogin();
		
		try {
			if (RappiUtility.clickOnElement(driver.findElement(btnEntrarLogin))) {
				if (objLogin.verifyContentInLogin() /*&& objLogin.loginWith(sTipoLogin, sUserName, sPassword)*/) {
					return true;
				}else {
					throw new IOException("ERROR LOGIN REST: Login failed!");
				}
			}else {
				throw new IOException("ERROR CLICK LOGIN: Click On 'Login Btn' in Message isn't Enabled!");
			}
		} catch (Exception e) {
			System.out.println(e.getMessage());
			return false;
		}
		
	}

	/**
	 * This POM method will select a Product from Restaurants List
	 * 
	 * @param tipoBusqueda "0":Select Prod Random - "1":Search a Prod
	 */
	public void selectProdInRest(int tipoBusqueda) {

		switch (tipoBusqueda) {

		case 0:
			// System.out.println("Case 0");
			assertTrue("ERROR selectProdInRest: Restautant-Categoty-Product Invalid!", chooseARestFromMainList());
			break;

		case 1:
			// System.out.println("Case 1");
			assertTrue("ERROR selectProdInRest: Search Restautant-Product Invalid!", chooseARestFromSearchList());
			break;

		default:
			throw new IllegalArgumentException("Invalid Search Type Rest: " + tipoBusqueda);
		}
	}

}


